//Binary Tree Zigzag Level Order Traversal

//Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

//For example:
//Given binary tree {3,9,20,#,#,15,7},
//    3
//   / \
//  9  20
//    /  \
//   15   7
//return its zigzag level order traversal as:
//[
//  [3],
//  [20,9],
//  [15,7]
//]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(root==null) return res;
        Stack<TreeNode> backward = new Stack<TreeNode>();
        Stack<TreeNode> forward = new Stack<TreeNode>();
        Stack<TreeNode> tmp;
        
        boolean nomalOrder = true;
        backward.push(root);
        
        while(!backward.isEmpty()){
            List<Integer> item = new ArrayList<Integer>();
            while(!backward.isEmpty()){
                TreeNode node = backward.pop();
                item.add(node.val);
                if(nomalOrder){
                    if(node.left!=null){
                        forward.push(node.left);
                    }
                    if(node.right!=null){
                        forward.push(node.right);
                    }
                } else {
                    if(node.right != null){
                        forward.push(node.right);
                    }if(node.left != null){
                        forward.push(node.left);
                    }
                }
            }
            
            res.add(item);
            tmp = backward;
            backward=forward;
            forward=tmp;
            nomalOrder=!nomalOrder;
        }
        return res;
    }    
}

