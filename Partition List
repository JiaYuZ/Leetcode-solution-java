//Partition List 

//Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater
//than or equal to x.

//You should preserve the original relative order of the nodes in each of the two partitions.

//For example,
//Given 1->4->3->2->5->2 and x = 3,
//return 1->2->2->4->3->5.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null||head.next==null) return head;
        ListNode beforeStart=null,beforeEnd=null,afterStart=null,afterEnd=null,curr=head;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=null;
            if(curr.val<x){
                if(beforeStart==null) {
                    beforeEnd=curr;
                    beforeStart=beforeEnd;
                }
                else{
                    beforeEnd.next=curr;
                    beforeEnd=curr;
                }
            }
            else{
                if(afterStart==null){
                    afterEnd=curr;
                    afterStart=afterEnd;
                }
                else{
                    afterEnd.next=curr;
                    afterEnd=curr;
                }
            }
            curr=temp;
        }
        
        if(beforeStart==null) return afterStart;
        else{
            beforeEnd.next=afterStart;
            return beforeStart;
        }
    }
}
