//Word Ladder 

//Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:

//Only one letter can be changed at a time
//Each intermediate word must exist in the dictionary
//For example,

//Given:
//start = "hit"
//end = "cog"
//dict = ["hot","dot","dog","lot","log"]
//As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
//return its length 5.

public class Solution {
    public int ladderLength(String start, String end, Set<String> wordDict) {
        
        if(wordDict==null||wordDict.size()==0) return 0;
        
        Queue<String> queue = new LinkedList<String>();
        queue.offer(start);
        wordDict.remove(start);
        int length=1;
        
        while(!queue.isEmpty()){
            int count = queue.size();
            for(int i =0;i<count;i++){
                String current = queue.poll();
                for(char c='a';c<='z';c++){
                    for(int j=0;j<current.length();j++){
                        if(c==current.charAt(j)) continue;
                        String tmp = replace(current,j,c);
                        if(tmp.equals(end)){
                            return length + 1;
                        }
                        if(wordDict.contains(tmp)){
                            queue.offer(tmp);
                            wordDict.remove(tmp);
                        }
                    }
                }
            }
        length ++;
        }
        return 0;
    }
    private String replace(String s,int index,char c){
        char[] chars = s.toCharArray();
        chars[index]= c;
        return new String(chars);
    }
}
