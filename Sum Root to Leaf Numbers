//Sum Root to Leaf Numbers 

//Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

//An example is the root-to-leaf path 1->2->3 which represents the number 123.

//Find the total sum of all root-to-leaf numbers.

//For example,

//    1
//   / \
//  2   3
//The root-to-leaf path 1->2 represents the number 12.
//The root-to-leaf path 1->3 represents the number 13.

//Return the sum = 12 + 13 = 25

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root == null) return 0;
        ArrayList<Integer> res=new ArrayList<Integer>();
        helper(root,0,res);
        int sum=0;
        for(int i=0;i<res.size();i++){
            sum+=res.get(i);
        }
        return sum;
    }
    private void helper(TreeNode curr,int s,ArrayList<Integer> res){
        if(curr==null) return;
        s=s*10+curr.val;
        if(curr.left==null&&curr.right==null){
            res.add(s);
        }
        helper(curr.left,s,res);
        helper(curr.right,s,res);
    }
}
