//Linked List Cycle II 

//Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

//Follow up:
//Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution{
    
    public ListNode detectCycle(ListNode head) {
        ListNode i = head;
        ListNode j = head;
        
        while(j != null && j.next != null){
            i = i.next;
            j = j.next.next;
            if(i==j)
            break;
        }
        if(j==null || j.next == null)
            return null; 
       
        i=head;
        while(i!=j){
            i=i.next;
            j=j.next;
        }
        return i;
    }
}
