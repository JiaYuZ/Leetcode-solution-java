//Construct Binary Tree from Preorder and Inorder Traversal

//Given preorder and inorder traversal of a tree, construct the binary tree.

//Note:
//You may assume that duplicates do not exist in the tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(inorder.length !=preorder.length||preorder.length==0) return null;
        return newTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1);
    }
    private int findPosition(int[] arr,int s,int e, int val){
        int i;
        for(i=s;i<=e;i++){
            if(arr[i]==val) break;
        }
        return i;
    }
    private TreeNode newTree(int[] preorder, int ps, int pe, int[] inorder,int is,int ie){
        if(is > ie){
            return null;
        }
        TreeNode root = new TreeNode(preorder[ps]);
        int position=findPosition(inorder,is,ie,preorder[ps]);
        root.left=newTree(preorder,ps+1,ps+position-is,inorder,is,position-1);
        root.right=newTree(preorder,position-ie+pe+1,pe,inorder,position+1,ie);
        
        return root;
    }
}
