//Search in Rotated Sorted Array

//Suppose a sorted array is rotated at some pivot unknown to you beforehand.

//(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

//You are given a target value to search. If found in the array return its index, otherwise return -1.

//You may assume no duplicate exists in the array.

public class Solution {
    public int search(int[] nums, int target) {
        if(nums==null||nums.length==0) return -1;
        int mid=0,s=0,e=nums.length-1,index=0;
        while(s+1<e){
            mid=s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[s]<nums[mid]){
                if(nums[s]<=target&&nums[mid]>=target){
                    e=mid;
                } else{
                    s=mid;
                }
            } else {
                if(nums[mid]<=target&&nums[e]>=target){
                    s=mid;
                } else {
                    e=mid;
                }
            }
        }
        if(nums[s]==target) return s;
        if(nums[e]==target) return e;
        return -1;
    }
}
