//4Sum 

//Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d
//= target? Find all unique quadruplets in the array which gives the sum of target.

//Note:
//Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
//The solution set must not contain duplicate quadruplets.
//    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

//    A solution set is:
//    (-1,  0, 0, 1)
//    (-2, -1, 1, 2)
//    (-2,  0, 0, 2)

public class Solution {
    public ArrayList<ArrayList<Integer>> fourSum(int[] nums, int target) {
        
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int l = nums.length;
        if(l<4) return res;
        HashMap<Integer,ArrayList<ArrayList<Integer>>> map = new HashMap<Integer,ArrayList<ArrayList<Integer>>>();
        Arrays.sort(nums);
        for(int i=0;i<l-1;i++){
            for(int j=i+1;j<l;j++){
                ArrayList<Integer> list = new ArrayList<Integer>(2); 
                int sum=nums[i]+nums[j];
                list.add(i);
                list.add(j);
               if(!map.containsKey(sum)) {
                   ArrayList<ArrayList<Integer>> value = new ArrayList<ArrayList<Integer>>();
                   value.add(list);
                   map.put(sum,value);
               }
               else{
                    ArrayList<ArrayList<Integer>> value = map.get(sum);
                    value.add(list);
               }
            }
        }
        
        HashSet<ArrayList<Integer>> set = new HashSet<>();    
        for(Integer sum:map.keySet()){
            ArrayList<ArrayList<Integer>> sumPair = map.get(sum);
            if(map.containsKey(target-sum)){
                if(target-sum==sum&&sumPair.size()==1)
                    continue;
                ArrayList<ArrayList<Integer>> pairs=map.get(target-sum);
                for(ArrayList<Integer> pair1:sumPair){
                    for(ArrayList<Integer> pair2:pairs){
                        if(pair1==pair2) continue;
                        if(pair1.contains(pair2.get(0))||
                        pair1.contains(pair2.get(1))) 
                            continue;
                        ArrayList<Integer> tmpResult = new ArrayList<Integer>(4);
                        tmpResult.add(nums[pair1.get(0)]);
                        tmpResult.add(nums[pair1.get(1)]);
                        tmpResult.add(nums[pair2.get(0)]);
                        tmpResult.add(nums[pair2.get(1)]);
                        
                        Collections.sort(tmpResult);
                        set.add(tmpResult);
                    }
                }
            }
        }    
            
        res.addAll(set);
        return res;
    }
}
