//Palindrome Partitioning 

//Given a string s, partition s such that every substring of the partition is a palindrome.

//Return all possible palindrome partitioning of s.

//For example, given s = "aab",
//Return

//  [
//    ["aa","b"],
//    ["a","a","b"]
//  ]

public class Solution {
    public ArrayList<ArrayList<String>> partition(String s) {
        ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
        if(s==null) return res;
        ArrayList<String> item = new ArrayList<String>();
        helper(res,item,0,s);
        return res;
    }
    private boolean isPalindrom(String s){
        int p = 0;
        int q = s.length()-1;
        while(p<q){
            if(s.charAt(p)!=s.charAt(q)) return false;
            p++;
            q--;
        }
        return true;
    }
    private void helper(ArrayList<ArrayList<String>> res,ArrayList<String> item,int pos,String s){
        if(pos==s.length()){
            res.add(new ArrayList<String>(item));
            return;
        }
        for(int i = pos+1;i<=s.length();i++){
            String prefix = s.substring(pos,i);
            if(!isPalindrom(prefix)){
                continue;
            }
            item.add(prefix);
            helper(res,item,i,s);
            item.remove(item.size()-1);
        }
    }
}
