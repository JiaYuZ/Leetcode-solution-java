//Permutations

//Given a collection of numbers, return all possible permutations.

//For example,
//[1,2,3] have the following permutations:
//[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

public class Solution {
    public ArrayList<ArrayList<Integer>> permute(int[] nums) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int l = nums.length;
        if(l<=0) return res;
        helper(nums,new boolean[nums.length], new ArrayList<Integer>(), res);
        return res;
    }
    public void helper(int[] n,boolean[] used, ArrayList<Integer> item, ArrayList<ArrayList<Integer>> res){
        if(item.size()==n.length) {
            res.add(new ArrayList<Integer>(item));
            return;
        }
        for(int i=0;i<n.length;i++){
            if(!used[i]){
                used[i]=true;
                item.add(n[i]);
                helper(n,used,item,res);
                item.remove(item.size()-1);
                used[i]=false;
            }
        }
    }
}
