//Subsets II

//Given a collection of integers that might contain duplicates, nums, return all possible subsets.

//Note:
//Elements in a subset must be in non-descending order.
//The solution set must not contain duplicate subsets.
//For example,
//If nums = [1,2,2], a solution is:

//[
//  [2],
//  [1],
//  [1,2,2],
//  [2,2],
//  [1,2],
//  []
//]

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> item=new ArrayList<Integer>();
        if(nums==null||nums.length==0) return res;
        Arrays.sort(nums);
        helper(res,item,nums,0);
        return res;
    }
    private void helper(List<List<Integer>> res,List<Integer> item,int[] nums,int p){
        res.add(new ArrayList<Integer>(item));
        for(int i=p;i<nums.length;i++){
            if(i!=p&&nums[i]==nums[i-1]) continue;
            item.add(nums[i]);
            helper(res,item,nums,i+1);
            item.remove(item.size()-1);
        }
    }
}
