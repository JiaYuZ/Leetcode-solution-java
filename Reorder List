//Reorder List

//Given a singly linked list L: L0→L1→…→Ln-1→Ln,
//reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

//You must do this in-place without altering the nodes' values.

//For example,
//Given {1,2,3,4}, reorder it to {1,4,2,3}.

public class Solution {
    public void reorderList(ListNode head){
        if(head==null||head.next==null){
            return;
        }
        ListNode p=head,q=head;
        while(q.next!=null&&q.next.next!=null){
            p=p.next;
            q=q.next.next;
        }
        q=p.next;
        p.next=null;
        q=reverse(q);
        p=merge(head,q);
    }
    private ListNode reverse(ListNode head){
        ListNode p=head,q=head.next,r;
        p.next=null;
        while(q!=null){
            r=q.next;
            q.next=p;
            p=q;
            q=r;
        }
        return p;
    }
    private ListNode merge(ListNode h1,ListNode h2){
        ListNode dummy=new ListNode(0);
        ListNode temp=dummy;
        boolean odd = true;
        while(h1!=null||h2!=null){
            if(odd) { 
                temp.next=h1;
                temp=h1;
                h1=h1.next;
            }
            else {
                temp.next=h2;
                temp=h2;
                h2=h2.next;
            }
            odd=!odd;
        }
        return dummy.next; 
    }
    
}
