//Permutations II

//Given a collection of numbers that might contain duplicates, return all possible unique permutations.

//For example,
//[1,1,2] have the following unique permutations:
//[1,1,2], [1,2,1], and [2,1,1].

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums==null||nums.length==0) return res;
        Arrays.sort(nums);
        helper(nums,new boolean[nums.length], new ArrayList<Integer>(), res);
        return res;
    }
    public void helper(int[] n,boolean[] used, ArrayList<Integer> item, List<List<Integer>> res){
        if(item.size()==n.length) {
            res.add(new ArrayList<Integer>(item));
            return;
        }
        for(int i=0;i<n.length;i++){
            if(used[i]||(i!=0&&n[i]==n[i-1]&&!used[i-1])){
                continue;
            }
            used[i]=true;
            item.add(n[i]);
            helper(n,used,item,res);
            item.remove(item.size()-1);
            used[i]=false;
        }
    }
}
