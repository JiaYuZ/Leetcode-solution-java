//Binary Tree Level Order Traversal II 

//Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by 
//level from leaf to root).

//For example:
//Given binary tree {3,9,20,#,#,15,7},
//    3
//   / \
//  9  20
//    /  \
//   15   7
//return its bottom-up level order traversal as:
//[
//  [15,7],
//  [9,20],
//  [3]
//]

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> tree = new ArrayList<ArrayList<Integer>>();
        Tree(root,0,tree);
        Collections.reverse(tree);
        return tree;
    }
    public void Tree(TreeNode node, int level, ArrayList<ArrayList<Integer>> tree){
        ArrayList<Integer> curr = null;
        if(node==null) return;
        
        if(level<tree.size()){
            curr = tree.get(level);
        }
        else{
            curr = new ArrayList<Integer>();
            tree.add(curr);
        }
        curr.add(node.val);
        
        Tree(node.left,level+1,tree);
        Tree(node.right,level+1,tree);
    }
}
