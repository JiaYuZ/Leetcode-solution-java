//Combination Sum II 

//Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

//Each number in C may only be used once in the combination.

//Note:
//All numbers (including target) will be positive integers.
//Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
//The solution set must not contain duplicate combinations.
//For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
//A solution set is: 
//[1, 7] 
//[1, 2, 5] 
//[2, 6] 
//[1, 1, 6] 

public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum2(int[] candidates, int target) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int l=candidates.length;
        if(l<=0) return res;
        Arrays.sort(candidates);
        Sum(candidates,0,target,new ArrayList<Integer>(),res);
        return res;
    }
    public void Sum(int[] c, int s, int t, ArrayList<Integer> item, ArrayList<ArrayList<Integer>> res){
        
        if(t==0){
            res.add(new ArrayList<Integer> (item));
            return;
        }
        if(t<0||s>=c.length) return;
        for(int i=s;i<c.length;i++){
            if(i>s&&c[i]==c[i-1]) continue;
            item.add(c[i]);
            Sum(c,i+1,t-c[i],item,res);
            item.remove(item.size()-1);
        }
    }
}
